{
  "name": "barista",
  "description": "URL router & generator, similar to Rails / merb",
  "version": "0.0.8",
  "author": {
    "name": "Kieran Huggins",
    "email": "kieran@kieran.ca"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kieran/barista"
  },
  "main": "./index.js",
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "inflection": "*"
  },
  "readme": "Barista is a simple URL router for NodeJS.\n\n\nIn a nutshell\n=============\n\n```javascript\nrouter.get( '/:beverage/near/:location(.:format)' )\n      .to( 'beverage.byLocation' )\n\nrouter.first( '/coffee/near/90210', 'GET' )\n// -> { controller:'beverage', action:'byLocation', beverage:'coffee', location:90210 }\n\nrouter.url({\n  controller: 'beverage',\n  action: 'byLocation',\n  beverage: 'coffee',\n  location: 90210,\n  format: 'json'\n})\n// -> '/coffee/near/90210.json'\n```\n\n\nGetting Barista\n===============\n\nInstall via npm, thusly:\n\n```javascript\nnpm install barista\n```\n\nUsing Barista\n-------------\n\n```javascript\nvar Router = require('barista').Router;\n\nvar router = new Router;\n```\n\nAdding routes\n-------------\n\n### A simple example\n\n```javascript\nrouter.match( '/products', 'GET' )\n      .to( 'products.index' )\n```\n\n### Rails-esque variable names\n\n```javascript\nrouter.match( '/products/:id', 'GET' )\n      .to( 'products.show' )\n\nrouter.match( '/profiles/:username', 'GET' )\n      .to( 'users.show' )\n\nrouter.match( '/products/:id(.:format)', 'GET' )\n      .to( 'products.show' )\n```\n\n### Globs (they also capture slashes)\n\n```javascript\nrouter.get('/timezones/*tzname')\n      .to( 'timezones.select' )\n\nrouter.first( '/timezones/America/Toronto', 'GET' )\n// -> { controller:'timezones', action:'select', tzname:'America/Toronto' }\n\n\nrouter.match( '/*path(.:format)' ) // a \"catch-all\" route:\n      .to( 'errors.notFound' )\n\nrouter.first( '/somewhere/that/four-oh-fours.json', 'GET' )\n// -> { controller:'errors', action:'notFound', path:'somewhere/that/four-oh-fours', format:'json' }\n```\n\n### Match conditions\n\n```javascript\nrouter.match( '/:beverage/near/:zipcode', 'GET' )\n      .to( 'beverage.byZipCode' )\n      .where({\n        // an array of options\n        beverage: [ 'coffee', 'tea', 'beer', 'warm_sake' ],\n        // a regex pattern\n        zipcode: /^\\d{5}(-\\d{4})?$/\n      })\n\nrouter.match( '/:beverage/near/:location', 'GET' )\n      .to( 'beverage.byLocation' )\n      .where({\n        // could be a postal code\n        // OR a zip code\n        // OR the word 'me' (geolocation FTW)\n        location: [ /^\\d{5}(-\\d{4})?$/, /^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$/, 'me' ]\n      })\n```\n\n### Convenience methods\n\n```javascript\nrouter.get( '/products/:id(.:format)' )\n      .to( 'products.show' )\n\nrouter.put( '/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.post( '/products' )\n      .to( 'products.create' )\n\nrouter.del( '/products' )\n      .to( 'products.destroy' )\n```\n\n### REST Resources\n\n```javascript\nrouter.resource( 'products' )\n```\n\nis equivalent to:\n\n```javascript\nrouter.get( '/products(.:format)' )\n      .to( 'products.index' )\n\nrouter.get( '/products/add(.:format)' )\n      .to( 'products.add' )\n\nrouter.get( '/products/:id(.:format)' )\n      .to('products.show' )\n\nrouter.get('/products/:id/edit(.:format)' )\n      .to( 'products.edit' )\n\nrouter.post('/products(.:format)' )\n      .to( 'products.create' )\n\nrouter.put('/products/:id(.:format)' )\n      .to( 'products.update' )\n\nrouter.del('/products/:id(.:format)' )\n      .to( 'products.destroy' )\n```\n\nResolution & dispatching\n------------------------\n\nThe `router.first( url, method [, callback] )` method can be used in two ways:\n\n```javascript\nvar params = router.first( '/products/15', 'GET' )\n```\n\nOR\n\n```javascript\nrouter.first( '/products/15', 'GET', function( params ){\n  // dispatch the request or something\n})\n```\n\nYou can get all the matching routes like so:\n\n```javascript\nvar params = router.all( '/products/15', 'GET' )\n\n//=> [params, params, params....]\n```\n\nRoute generation\n----------------\n\nPass in a params hash, get back a tasty string:\n\n```javascript\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5\n} )\n//=> '/products/5'\n\nrouter.url( {\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json'\n} )\n//=> '/products/5.json'\n```\n\nSet the optional second parameter to `true` if you want\nextra params appended as a query string:\n\n```javascript\nrouter.url({\n  controller: 'products',\n  action: 'show',\n  id: 5,\n  format: 'json',\n  love: 'cheese'\n}, true )\n//=> '/products/5.json?love=cheese'\n```\n\n\nCaveats & TODOs\n---------------\nnested optional segments are currently unsupported. e.g. this won't work:\n\n```javascript\nrouter.get( '/:controller(/:action(/:id(.:format)))' )\n```\n\nnesting routes & resources is also still on the TODO list\n\n\nThings I forgot...\n------------------\n...might be in the `/docs` folder...\n\n...or might not exist at all.\n\n\nIt's broken!\n------------\nShit happens.\n\nWrite a test that fails and add it to the tests folder,\nthen create an issue!\n\nPatches welcome :-)\n\n\nWho are you?\n------------\nI'm [Kieran Huggins](mailto:kieran@refactory.ca), partner at [Refactory](http://refactory.ca) in Toronto, Canada.",
  "_id": "barista@0.0.8",
  "_from": "barista@0.0.x"
}
