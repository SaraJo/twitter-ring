{
  "name": "mongodb-wrapper",
  "description": "Exactly-like-the-console wrapper for node-mongodb-native",
  "version": "0.4.0",
  "author": {
    "name": "i.TV",
    "email": "sean@i.tv"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/idottv/node-mongodb-wrapper.git"
  },
  "bugs": {
    "email": "sean@i.tv",
    "url": "http://github.com/idottv/node-mongodb-wrapper/issues"
  },
  "main": "index",
  "scripts": {
    "test": "node test.js"
  },
  "keywords": [
    "mongodb"
  ],
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "mongodb": "0.9.9-8",
    "async_testing": "0.3.2"
  },
  "directories": {
    "lib": "lib"
  },
  "readme": "[node-mongodb-native]: https://github.com/christkv/node-mongodb-native     \n[javascript driver]: http://www.mongodb.org/display/DOCS/Manual\n[docs]: http://www.mongodb.org/display/DOCS/Manual\n\n# node-mongodb-wrapper\n\nA wrapper for [node-mongodb-native][node-mongodb-native] as close as possible to the [native javascript driver][javascript driver]. Why learn two interfaces?\n\nYes, we know other people are doing the same thing. This one has been easier to use. \n\n## Features\n\n1. Minimal interface closely matching the command-line driver: [http://www.mongodb.org/display/DOCS/Manual][docs]\n2. Lazy open/close of connections\n3. Most features of [node-mongodb-native][node-mongodb-native]\n\n## Installation\n\n<pre>\n  npm install mongodb-wrapper\n</pre>\n\n## Usage\n\n1. You have to tell the db object which collections you're about to use (Harmony Proxies, I need you!)\n2. You have to provide callbacks on \"actionable\" calls (`toArray`, `count`, but not `find`)\n3. Otherwise, just like the native [javascript driver][javascript driver]\n\n<pre>\n\tvar mongo = require('mongodb-wrapper')\n\tvar db = mongo.db('localhost', 27017, 'test')\n\tdb.collection('posts')\n\t\n\tdb.posts.save({title: \"A new post\", body: \"Here is some text\"}, function(err, post) {\n\t\tdb.posts.findOne({_id: doc._id}, function(err, post) {\n\t\t\tdb.posts.find().limit(1).toArray(function(err, posts) {\n\t\t\t\t// posts[0].title == \"A new post\"\n\t\t\t})\n\t\t})\n\t})      \n</pre>\n\nFor more examples, [please look at the test suite](https://github.com/idottv/node-mongodb-wrapper/blob/master/lib/mongodb-wrapper.js)\n\n## Documentation\n\nRemember the guiding principle: the syntax exactly matches the [command-line driver][docs], except you pass a call back to any function that hits the database. \n\n#### Connecting\n\n`mongo.db(host, port, dbname, [prefix], [username], [password])` - returns an unopened database object. \n\n* If prefix is specified all collections will use the prefix in mongo, but you refer to them without the prefix in node. \n* If username and password are specified, it will attempt to authenticate. \n\n`db.collection(name)` - Returns a `Collection` object. Also creates `db[name]` so you can do this:\n    \n    db.collection('users')\n    db.users.count(cb)\n\n#### Replica Sets\n\nReplica sets are also supported with an alternate function signature:\n``` JavaScript\nvar hostsArray = [\n  // opts is a hash of mongodb-native server opts: http://mongodb.github.com/node-mongodb-native/api-generated/server.html\n  // also optional\n  {host: \"host1\", port: 27017, opts: {}},\n  {host: \"host1\", port: 27018, opts: {}},\n  ...\n]\n// other replica set opts, such as read_secondary, are passed in here\n// these opts are also passed to each mongodb-native server object, so you can have defaults for your servers\nvar opts = {rs_name: \"myReplicaSet\"}\n\nmongo.db(hostsArray, opts, dbname, [prefix], [username], [password])\n```\n \n\n#### Authentication\n\n`db.auth(username, password, cb)` - You can pass `username` and `password` into mongo.db instead of calling this manually\n\n`db.addUser(username, password, cb)`\n\n`db.removeUser(username, password, cb)`\n\n#### Database \n\n`db.dropDatabase(cb)`\n\n`db.lastError(cb)` - `cb(err, lastError)`\n\n`db.eval(code, [parameters], cb)`\n\n`db.createCollection(name, options, cb)` - allows you to create a collection by hand if you want to specify the options\n\n### Collection\n\n`collection.ensureIndex(index, options, cb)`\n\n`collection.dropIndexes(cb)`\n\n`collection.renameCollection(newName, dropTarget, cb)`\n\n`collection.insert(doc(s), cb)`\n\n`collection.remove(selector, cb)`\n\n`collection.drop(cb)`\n\n`collection.save(doc, cb)`\n\n`collection.update(selector, updates, [upsert], [multi], cb)`\n\n`collection.count(cb)`\n\n`collection.findAndModify(options, cb)`\n\n`collection.find(selector, fields)` - Returns a `Cursor`\n\n`collection.findOne(selector, fields, cb)`\n\n`collection.group(options, cb)`\n\n`collection.mapReduce(map, reduce, options, cb)` - map and reduce can be functions, it will toString them for you. \n\n`collection.distinct(key, [query], cb)`\n\n### Cursor\n\n`cursor.limit(num)` \n\n`cursor.skip(num)`\n\n`cursor.sort({field:1})`\n\n`cursor.next(cb)`\n\n`cursor.explain(cb)`\n\n`cursor.toArray(cb)`\n\n`cursor.count(cb)`\n\n### Useful Exports\n\n`mongo.ObjectID` - you need to wrap any string ids in this class to match on `_id`\n\n",
  "_id": "mongodb-wrapper@0.4.0",
  "_from": "mongodb-wrapper@0.4.x"
}
